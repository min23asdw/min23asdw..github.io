{"version":3,"file":"static/js/375.d163fb63.chunk.js","mappings":"+LAiTA,QA7SA,WACE,MAgRMA,EAAY,CAhRT,uyEA2FA,ijCAsLHC,EAAY,CA7IT,0sEA0FA,i0CAoDT,OACEC,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,EACEC,EAAAA,EAAAA,KAACC,EAAAA,EAAM,KACPJ,EAAAA,EAAAA,MAAA,OAAKK,MAAO,CAAEC,QAAS,MAAOJ,SAAA,EAC5BC,EAAAA,EAAAA,KAAA,MAAAD,SAAI,+BACJC,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQC,cAAe,OAAQN,SACnDO,MAAMC,KAAKZ,GAAW,CAACa,EAAGC,KACzBT,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEQ,MAAO,OAAQX,UAC3BC,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAASC,KAAMJ,GAATC,UAKtBT,EAAAA,EAAAA,KAAA,MAAAD,SAAI,0CACJC,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEE,QAAS,OAAQC,cAAe,OAAQN,SACnDO,MAAMC,KAAKX,GAAW,CAACY,EAAGC,KACzBT,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEQ,MAAO,OAAQX,UAC3BC,EAAAA,EAAAA,KAACW,EAAAA,EAAS,CAASC,KAAMJ,GAATC,cAO9B,C,wDCzSA,MA8CA,EA9C4CI,IAAe,IAAd,KAAED,GAAMC,EACnD,MAAOC,EAAQC,IAAWC,EAAAA,EAAAA,WAAkB,GAS5C,OACEhB,EAAAA,EAAAA,KAAA,OAAAD,UACEF,EAAAA,EAAAA,MAAA,OACEK,MAAO,CACLE,QAAS,OACTC,cAAe,MACfY,WAAY,SACZC,eAAgB,gBAChBC,SAAU,WACVC,gBAAiB,UACjBjB,QAAS,MACTkB,aAAc,MACdC,OAAQ,QACRvB,SAAA,EAEFC,EAAAA,EAAAA,KAAA,OAAKE,MAAO,CAAEqB,WAAY,WAAYC,SAAU,cAAezB,UAC7DC,EAAAA,EAAAA,KAAA,QAAAD,SAAOa,OAETZ,EAAAA,EAAAA,KAAA,UACEyB,QA3BgBC,KACtBC,UAAUC,UAAUC,UAAUjB,GAC9BG,GAAQ,GACRe,YAAW,KACTf,GAAQ,EAAM,GACb,IAAK,EAuBFb,MAAO,CACLkB,gBAAiB,QACjBW,MAAO,OACPC,OAAQ,OACRX,aAAc,MACdlB,QAAS,MACT8B,OAAQ,WACRlC,SAEDe,EAAS,SAAW,aAGrB,C","sources":["component/ReactInlineProp.tsx","sections/CodeBlock.tsx"],"sourcesContent":["import React from \"react\";\r\nimport CodeBlock from \"../sections/CodeBlock\";\r\nimport Navbar from \"./Navbar\";\r\n\r\nfunction INLINE() {\r\n  const c_0 = `\"use client\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport file from \"./data.json\";\r\nimport TodoCard from \"./tocard\";\r\n\r\nexport interface Item {\r\n  name: string;\r\n  id: number;\r\n  status: \"todo\" | \"doing\" | \"done\";\r\n}\r\n\r\nexport default function Todo() {\r\n  const [items, setItems] = useState<Item[]>([]);\r\n\r\n  useEffect(() => {\r\n    setItems(file.data.map((item) => ({ ...item, status: \"todo\" })));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(items);\r\n  }, [items]);\r\n\r\n  const updateStatus = useCallback(\r\n    (item: Item, status: Item[\"status\"]) => {\r\n      setItems((prevItems) =>\r\n        prevItems.map((i) => (i.id === item.id ? { ...i, status } : i))\r\n      );\r\n    },\r\n    [items]\r\n  );\r\n\r\n  const updateItem = useCallback(\r\n    (item: Item, name: string) => {\r\n      setItems((prevItems) =>\r\n        prevItems.map((i) => (i.id === item.id ? { ...i, name } : i))\r\n      );\r\n    },\r\n    [items]\r\n  );\r\n\r\n  const filteredItems = useCallback(\r\n    (status: Item[\"status\"]) => items.filter((item) => item.status === status),\r\n    [items]\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-row justify-center gap-3 m-3\">\r\n      <div>\r\n        todo\r\n        <div className=\"flex flex-col gap-3 w-80\">\r\n          {filteredItems(\"todo\").map((item) => (\r\n            <TodoCard\r\n              key={item.id}\r\n              item={item}\r\n              updateItem={updateItem}\r\n              next={() => updateStatus(item, \"doing\")}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        doing\r\n        <div className=\"flex flex-col gap-3 w-80\">\r\n          {filteredItems(\"doing\").map((item) => (\r\n            <TodoCard\r\n              key={item.id}\r\n              item={item}\r\n              updateItem={updateItem}\r\n              back={() => updateStatus(item, \"todo\")}\r\n              next={() => updateStatus(item, \"done\")}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        done\r\n        <div className=\"flex flex-col gap-3 w-80\">\r\n          {filteredItems(\"done\").map((item) => (\r\n            <TodoCard\r\n              key={item.id}\r\n              item={item}\r\n              updateItem={updateItem}\r\n              back={() => updateStatus(item, \"doing\")}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}`;\r\n\r\n  const c_1 = `import { useCallback, useState } from \"react\";\r\nimport { Item } from \"./page\";\r\n\r\ninterface CardProps {\r\n  item: Item;\r\n  updateItem: (item: Item, name: string) => void;\r\n  next?: () => void;\r\n  back?: () => void;\r\n}\r\n\r\nexport default function TodoCard(props: CardProps) {\r\n  const { item, next, back, updateItem } = props;\r\n\r\n  const [newName, setNewName] = useState(\"\");\r\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewName(e.target.value);\r\n  };\r\n\r\n  const handleNameSubmit = () => {\r\n    if (newName.trim() !== \"\") {\r\n      updateItem(item, newName);\r\n      setNewName(\"\");\r\n    }\r\n  };\r\n  return (\r\n    <div className=\"bg-slate-300 h-12 flex flex-row justify-around items-center\">\r\n      {back && <button onClick={back}>{\"<\"}</button>}\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={newName}\r\n          onChange={handleNameChange}\r\n          onBlur={handleNameSubmit}\r\n        />\r\n        {item.name} {item.status}\r\n      </div>\r\n      {next && <button onClick={next}>{\">\"}</button>}\r\n    </div>\r\n  );\r\n}`;\r\n\r\n  const d_0 = `\"use client\";\r\nimport React, { useEffect, useState, useCallback } from \"react\";\r\nimport file from \"./data.json\";\r\nimport TodoCard from \"./tocard\";\r\n\r\nexport interface Item {\r\n  name: string;\r\n  id: number;\r\n  status: \"todo\" | \"doing\" | \"done\";\r\n}\r\n\r\nexport default function Todo() {\r\n  const [items, setItems] = useState<Item[]>([]);\r\n\r\n  useEffect(() => {\r\n    setItems(file.data.map((item) => ({ ...item, status: \"todo\" })));\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    console.log(items);\r\n  }, [items]);\r\n\r\n  const updateStatus = useCallback(\r\n    (item: Item, status: Item[\"status\"]) => {\r\n      setItems((prevItems) =>\r\n        prevItems.map((i) => (i.id === item.id ? { ...i, status } : i))\r\n      );\r\n    },\r\n    [items]\r\n  );\r\n\r\n  const updateItem = useCallback(\r\n    (item: Item, name: string) => {\r\n      setItems((prevItems) =>\r\n        prevItems.map((i) => (i.id === item.id ? { ...i, name } : i))\r\n      );\r\n    },\r\n    [items]\r\n  );\r\n\r\n  const filteredItems = useCallback(\r\n    (status: Item[\"status\"]) => items.filter((item) => item.status === status),\r\n    [items]\r\n  );\r\n\r\n  return (\r\n    <div className=\"min-h-screen flex flex-row justify-center gap-3 m-3\">\r\n      <div>\r\n        todo\r\n        <div className=\"flex flex-col gap-3 w-80\">\r\n          {filteredItems(\"todo\").map((item) => (\r\n            <TodoCard\r\n              key={item.id}\r\n              item={item}\r\n              updateStatus={updateStatus}\r\n              updateItem={updateItem}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        doing\r\n        <div className=\"flex flex-col gap-3 w-80\">\r\n          {filteredItems(\"doing\").map((item) => (\r\n            <TodoCard\r\n              key={item.id}\r\n              item={item}\r\n              updateStatus={updateStatus}\r\n              updateItem={updateItem}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n      <div>\r\n        done\r\n        <div className=\"flex flex-col gap-3 w-80\">\r\n          {filteredItems(\"done\").map((item) => (\r\n            <TodoCard\r\n              key={item.id}\r\n              item={item}\r\n              updateStatus={updateStatus}\r\n              updateItem={updateItem}\r\n            />\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </div>\r\n  );\r\n}`;\r\n\r\n  const d_1 = `import { useState } from \"react\";\r\nimport { Item } from \"./page\";\r\n\r\ninterface CardProps {\r\n  item: Item;\r\n  updateStatus: (item: Item, status: Item[\"status\"]) => void;\r\n  updateItem: (item: Item, name: string) => void;\r\n}\r\n\r\nexport default function TodoCard(props: CardProps) {\r\n  const { item, updateStatus, updateItem } = props;\r\n  const [newName, setNewName] = useState(\"\");\r\n\r\n  const handleNext = () => {\r\n    updateStatus(item, item.status === \"todo\" ? \"doing\" : \"done\");\r\n  };\r\n\r\n  const handleBack = () => {\r\n    updateStatus(item, item.status === \"done\" ? \"doing\" : \"todo\");\r\n  };\r\n\r\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\r\n    setNewName(e.target.value);\r\n  };\r\n\r\n  const handleNameSubmit = () => {\r\n    if (newName.trim() !== \"\") {\r\n      updateItem(item, newName);\r\n      setNewName(\"\");\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className=\"bg-slate-300 h-12 flex flex-row justify-around items-center\">\r\n      {item.status !== \"todo\" && <button onClick={handleBack}>{\"<\"}</button>}\r\n\r\n      <div>\r\n        <input\r\n          type=\"text\"\r\n          value={newName}\r\n          onChange={handleNameChange}\r\n          onBlur={handleNameSubmit}\r\n        />\r\n        {item.name} {item.status}\r\n      </div>\r\n      {item.status !== \"done\" && <button onClick={handleNext}>{\">\"}</button>}\r\n    </div>\r\n  );\r\n}`;\r\n\r\n  const code_ver1 = [c_0, c_1];\r\n  const code_ver2 = [d_0, d_1];\r\n  return (\r\n    <>\r\n      <Navbar />\r\n      <div style={{ padding: \"5%\" }}>\r\n        <h1>Version 1 Inline function</h1>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          {Array.from(code_ver1, (v, i) => (\r\n            <div style={{ width: \"50%\" }}>\r\n              <CodeBlock key={i} code={v} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n\r\n        <h1>Version 2 Passing existing functions</h1>\r\n        <div style={{ display: \"flex\", flexDirection: \"row\" }}>\r\n          {Array.from(code_ver2, (v, i) => (\r\n            <div style={{ width: \"50%\" }}>\r\n              <CodeBlock key={i} code={v} />\r\n            </div>\r\n          ))}\r\n        </div>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default INLINE;\r\n","import React, { useState } from \"react\";\r\n\r\ninterface CodeBlockProps {\r\n  code: string;\r\n}\r\n\r\nconst CodeBlock: React.FC<CodeBlockProps> = ({ code }) => {\r\n  const [isCopy, setCopy] = useState<boolean>(false);\r\n  const copyToClipboard = () => {\r\n    navigator.clipboard.writeText(code);\r\n    setCopy(true);\r\n    setTimeout(() => {\r\n      setCopy(false);\r\n    }, 1000);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div\r\n        style={{\r\n          display: \"flex\",\r\n          flexDirection: \"row\",\r\n          alignItems: \"center\",\r\n          justifyContent: \"space-between\",\r\n          position: \"relative\",\r\n          backgroundColor: \"#f5f5f5\",\r\n          padding: \"8px\",\r\n          borderRadius: \"8px\",\r\n          margin: \"20px\",\r\n        }}\r\n      >\r\n        <pre style={{ whiteSpace: \"pre-wrap\", wordWrap: \"break-word\" }}>\r\n          <code>{code}</code>\r\n        </pre>\r\n        <button\r\n          onClick={copyToClipboard}\r\n          style={{\r\n            backgroundColor: \"white\",\r\n            color: \"gray\",\r\n            border: \"none\",\r\n            borderRadius: \"4px\",\r\n            padding: \"8px\",\r\n            cursor: \"pointer\",\r\n          }}\r\n        >\r\n          {isCopy ? \"Copied\" : \"Copy\"}\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CodeBlock;\r\n"],"names":["code_ver1","code_ver2","_jsxs","_Fragment","children","_jsx","Navbar","style","padding","display","flexDirection","Array","from","v","i","width","CodeBlock","code","_ref","isCopy","setCopy","useState","alignItems","justifyContent","position","backgroundColor","borderRadius","margin","whiteSpace","wordWrap","onClick","copyToClipboard","navigator","clipboard","writeText","setTimeout","color","border","cursor"],"sourceRoot":""}