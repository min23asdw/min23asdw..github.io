"use strict";(self.webpackChunkmin23asdw_portfolio=self.webpackChunkmin23asdw_portfolio||[]).push([[375],{5375:(e,t,n)=>{n.r(t),n.d(t,{default:()=>m});n(5043);var a=n(999),i=n(2295),s=n(579);const m=function(){const e=['"use client";\nimport React, { useEffect, useState, useCallback } from "react";\nimport file from "./data.json";\nimport TodoCard from "./tocard";\n\nexport interface Item {\n  name: string;\n  id: number;\n  status: "todo" | "doing" | "done";\n}\n\nexport default function Todo() {\n  const [items, setItems] = useState<Item[]>([]);\n\n  useEffect(() => {\n    setItems(file.data.map((item) => ({ ...item, status: "todo" })));\n  }, []);\n\n  useEffect(() => {\n    console.log(items);\n  }, [items]);\n\n  const updateStatus = useCallback(\n    (item: Item, status: Item["status"]) => {\n      setItems((prevItems) =>\n        prevItems.map((i) => (i.id === item.id ? { ...i, status } : i))\n      );\n    },\n    [items]\n  );\n\n  const updateItem = useCallback(\n    (item: Item, name: string) => {\n      setItems((prevItems) =>\n        prevItems.map((i) => (i.id === item.id ? { ...i, name } : i))\n      );\n    },\n    [items]\n  );\n\n  const filteredItems = useCallback(\n    (status: Item["status"]) => items.filter((item) => item.status === status),\n    [items]\n  );\n\n  return (\n    <div className="min-h-screen flex flex-row justify-center gap-3 m-3">\n      <div>\n        todo\n        <div className="flex flex-col gap-3 w-80">\n          {filteredItems("todo").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateItem={updateItem}\n              next={() => updateStatus(item, "doing")}\n            />\n          ))}\n        </div>\n      </div>\n      <div>\n        doing\n        <div className="flex flex-col gap-3 w-80">\n          {filteredItems("doing").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateItem={updateItem}\n              back={() => updateStatus(item, "todo")}\n              next={() => updateStatus(item, "done")}\n            />\n          ))}\n        </div>\n      </div>\n      <div>\n        done\n        <div className="flex flex-col gap-3 w-80">\n          {filteredItems("done").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateItem={updateItem}\n              back={() => updateStatus(item, "doing")}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}','import { useCallback, useState } from "react";\nimport { Item } from "./page";\n\ninterface CardProps {\n  item: Item;\n  updateItem: (item: Item, name: string) => void;\n  next?: () => void;\n  back?: () => void;\n}\n\nexport default function TodoCard(props: CardProps) {\n  const { item, next, back, updateItem } = props;\n\n  const [newName, setNewName] = useState("");\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNameSubmit = () => {\n    if (newName.trim() !== "") {\n      updateItem(item, newName);\n      setNewName("");\n    }\n  };\n  return (\n    <div className="bg-slate-300 h-12 flex flex-row justify-around items-center">\n      {back && <button onClick={back}>{"<"}</button>}\n      <div>\n        <input\n          type="text"\n          value={newName}\n          onChange={handleNameChange}\n          onBlur={handleNameSubmit}\n        />\n        {item.name} {item.status}\n      </div>\n      {next && <button onClick={next}>{">"}</button>}\n    </div>\n  );\n}'],t=['"use client";\nimport React, { useEffect, useState, useCallback } from "react";\nimport file from "./data.json";\nimport TodoCard from "./tocard";\n\nexport interface Item {\n  name: string;\n  id: number;\n  status: "todo" | "doing" | "done";\n}\n\nexport default function Todo() {\n  const [items, setItems] = useState<Item[]>([]);\n\n  useEffect(() => {\n    setItems(file.data.map((item) => ({ ...item, status: "todo" })));\n  }, []);\n\n  useEffect(() => {\n    console.log(items);\n  }, [items]);\n\n  const updateStatus = useCallback(\n    (item: Item, status: Item["status"]) => {\n      setItems((prevItems) =>\n        prevItems.map((i) => (i.id === item.id ? { ...i, status } : i))\n      );\n    },\n    [items]\n  );\n\n  const updateItem = useCallback(\n    (item: Item, name: string) => {\n      setItems((prevItems) =>\n        prevItems.map((i) => (i.id === item.id ? { ...i, name } : i))\n      );\n    },\n    [items]\n  );\n\n  const filteredItems = useCallback(\n    (status: Item["status"]) => items.filter((item) => item.status === status),\n    [items]\n  );\n\n  return (\n    <div className="min-h-screen flex flex-row justify-center gap-3 m-3">\n      <div>\n        todo\n        <div className="flex flex-col gap-3 w-80">\n          {filteredItems("todo").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateStatus={updateStatus}\n              updateItem={updateItem}\n            />\n          ))}\n        </div>\n      </div>\n      <div>\n        doing\n        <div className="flex flex-col gap-3 w-80">\n          {filteredItems("doing").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateStatus={updateStatus}\n              updateItem={updateItem}\n            />\n          ))}\n        </div>\n      </div>\n      <div>\n        done\n        <div className="flex flex-col gap-3 w-80">\n          {filteredItems("done").map((item) => (\n            <TodoCard\n              key={item.id}\n              item={item}\n              updateStatus={updateStatus}\n              updateItem={updateItem}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}','import { useState } from "react";\nimport { Item } from "./page";\n\ninterface CardProps {\n  item: Item;\n  updateStatus: (item: Item, status: Item["status"]) => void;\n  updateItem: (item: Item, name: string) => void;\n}\n\nexport default function TodoCard(props: CardProps) {\n  const { item, updateStatus, updateItem } = props;\n  const [newName, setNewName] = useState("");\n\n  const handleNext = () => {\n    updateStatus(item, item.status === "todo" ? "doing" : "done");\n  };\n\n  const handleBack = () => {\n    updateStatus(item, item.status === "done" ? "doing" : "todo");\n  };\n\n  const handleNameChange = (e: React.ChangeEvent<HTMLInputElement>) => {\n    setNewName(e.target.value);\n  };\n\n  const handleNameSubmit = () => {\n    if (newName.trim() !== "") {\n      updateItem(item, newName);\n      setNewName("");\n    }\n  };\n\n  return (\n    <div className="bg-slate-300 h-12 flex flex-row justify-around items-center">\n      {item.status !== "todo" && <button onClick={handleBack}>{"<"}</button>}\n\n      <div>\n        <input\n          type="text"\n          value={newName}\n          onChange={handleNameChange}\n          onBlur={handleNameSubmit}\n        />\n        {item.name} {item.status}\n      </div>\n      {item.status !== "done" && <button onClick={handleNext}>{">"}</button>}\n    </div>\n  );\n}'];return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(i.A,{}),(0,s.jsxs)("div",{style:{padding:"5%"},children:[(0,s.jsx)("h1",{children:"Version 1 Inline function"}),(0,s.jsx)("div",{style:{display:"flex",flexDirection:"row"},children:Array.from(e,((e,t)=>(0,s.jsx)("div",{style:{width:"50%"},children:(0,s.jsx)(a.A,{code:e},t)})))}),(0,s.jsx)("h1",{children:"Version 2 Passing existing functions"}),(0,s.jsx)("div",{style:{display:"flex",flexDirection:"row"},children:Array.from(t,((e,t)=>(0,s.jsx)("div",{style:{width:"50%"},children:(0,s.jsx)(a.A,{code:e},t)})))})]})]})}},999:(e,t,n)=>{n.d(t,{A:()=>s});var a=n(5043),i=n(579);const s=e=>{let{code:t}=e;const[n,s]=(0,a.useState)(!1);return(0,i.jsx)("div",{children:(0,i.jsxs)("div",{style:{display:"flex",flexDirection:"row",alignItems:"center",justifyContent:"space-between",position:"relative",backgroundColor:"#f5f5f5",padding:"8px",borderRadius:"8px",margin:"20px"},children:[(0,i.jsx)("pre",{style:{whiteSpace:"pre-wrap",wordWrap:"break-word"},children:(0,i.jsx)("code",{children:t})}),(0,i.jsx)("button",{onClick:()=>{navigator.clipboard.writeText(t),s(!0),setTimeout((()=>{s(!1)}),1e3)},style:{backgroundColor:"white",color:"gray",border:"none",borderRadius:"4px",padding:"8px",cursor:"pointer"},children:n?"Copied":"Copy"})]})})}}}]);
//# sourceMappingURL=375.d163fb63.chunk.js.map